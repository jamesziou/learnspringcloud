spring:
  application:
    name: eureka-server
  pid:
    file: D:/taobao_data/${spring.application.name}/pid/application.pid
server:
  #最大请求头大小
  max-http-header-size: 8KB
  port: 7000
  servlet:
    context-path: /eureka-server
  tomcat:
    uri-encoding: UTF-8
    threads:
      #最小线程数
      min-spare: 10
      #最大线程数
      max: 10
    #最大链接数
    max-connections: 50
    #最大等待队列长度
    accept-count: 10
    #最多请求体大小
    max-http-form-post-size: 16KB
    #链接超时
    connection-timeout: 2000
    accesslog:
      enabled: true
      #格式
      pattern: "%t [%I] %{X-Forwarded-For}i %a %r %s (%D ms)"
      #缓存日志定期刷新输出（建议设置为true，否则当有请求立即打印日志对服务的响应会有影响）
      buffered: true
      #日志文件路径，可以是相对于tomcat的路径也可是绝对路径
      directory: D:/taobao_data/${spring.application.name}/logs/tomcat/logs
      #放在日志文件名中的日期格式
      file-date-format: .yyyy-MM-dd
      #日志文件名前缀
      prefix: access_log
      #日志名后缀
      suffix: .log
      #推迟在文件名中加入日期标记，直到日志分割时
      rename-on-rotate: false
      #是否启用访问日志分割
      rotate: true
      #日志文件的字符编码
      encoding: UTF-8

management:
  server:
    port: 7001
  endpoint:
    health:
      enabled: true
      probes:
        enabled: true
  endpoints:
    web:
      exposure:
        include: health
    enabled-by-default: false

eureka:
  server:
    #清理无效节点的时间间隔
    eviction-interval-timer-in-ms: 6000
    #测试环境关闭自我保护(生产打开)
    enable-self-preservation: false
    #开启自我保护的系数(如果在15分钟内超过85%的客户端节点都没有正常的心跳)
    renewal-percent-threshold: 0.85
    #Eureka Server启动时无法从临近Eureka Server节点获取注册信息，多长时间不对外提供注册服务(单机默认0)
    wait-time-in-ms-when-sync-empty: 0
    #eureka是CAP理论种基于AP策略，为了保证强一致性关闭此切换CP 默认不关闭 false关闭
    use-read-only-response-cache: true
    #eureka server刷新readCacheMap的时间
    #注意，client读取的是readCacheMap，这个时间决定了多久会把readWriteCacheMap的缓存更新到readCacheMap上
    response-cache-update-interval-ms: 3000
    #eureka server缓存readWriteCacheMap失效时间，这个只有在这个时间过去后缓存才会失效，失效前不会更新
    #过期后从registry重新读取注册服务信息，registry是一个ConcurrentHashMap。
    response-cache-auto-expiration-in-seconds: 180
  client:
    #只有一个server就不开启注册自己了
    register-with-eureka: false
    fetch-registry: true
    #eureka client刷新本地缓存时间
    registry-fetch-interval-seconds: 5
    service-url:
      defaultZone: http://localhost:${server.port}/eureka-server/eureka/
  instance:
    prefer-ip-address: true
    hostname: ${spring.cloud.client.ip-address}
    instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}:${server.port}
    #服务过期时间配置,超过这个时间没有接收到心跳EurekaServer就会将这个实例剔除
    #注意，EurekaServer一定要设置eureka.server.eviction-interval-timer-in-ms否则这个配置无效，这个配置一般为服务刷新时间配置的三倍
    lease-expiration-duration-in-seconds: 15
    #服务刷新时间配置，每隔这个时间会主动心跳一次
    lease-renewal-interval-in-seconds: 5